var searchIndex = JSON.parse('{\
"macmatic":{"doc":"macmatic: A Rust library for macOS automation with image …","t":"DDDDDLLLLLLLLLLLLLLLLLLALLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMMNDENNLLLLLLLLLLLLMMLLLLLLL","n":["Bot","Bounds","Rect","Window","WindowList","activate_window","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","center","click","click_on_image","clone","clone","clone_into","clone_into","error","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","height","into","into","into","into","into","key_click","key_down","key_sequence","key_up","mouse_down_on","mouse_up_on","new","new","new","prettify","screenshot","set_capture_frequency","set_capture_frequency","set_controller","set_high_dpi_ratio","set_wait_time","set_window_from_id","set_window_from_name","set_window_from_regex","sleep","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","width","window","write","writeln","x","y","CoreFoundation","Error","ErrorKind","ImageNotFound","Opencv","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","into","into","kind","message","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"macmatic"],[84,"macmatic::error"]],"d":["The <code>Bot</code> struct provides automation capabilities for …","Structure representing the absolute coordinates of a …","Structure representing a rectangle zone in the window.","The <code>Window</code> struct represents a single window.","The <code>WindowList</code> struct represents a list of windows.","Clicks at the top of the bottom to activate the window.","","","","","","","","","","","Returns the coordinates of the center of the rectangle.","Clicks the mouse button at the specified coordinates …","Searches for a specified image within the window and …","","","","","Error reporting","Searches for a a specified image within the window and …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Height of the rectangle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Presses and release the key.","Presses down the given key.","Types a string.","Releases the given key.","Pushes down the mouse button at the specified coordinates …","Releases the mouse button at the specified coordinates …","Creates a new <code>WindowList</code>.","Creates a new <code>Rect</code>.","Creates a new instance of <code>Bot</code>.","Returns a formatted string representing the list of …","Captures a screenshot of the window and saves it to the …","Sets the number of captures per seconds.","Sets the number of captures per seconds.","Sets the Enigo controller.","Sets High DPI mode (for standard screen: 1, for …","Sets the delay between mouse move and mouse down and up.","Sets the window based on the specified id.","Sets the window based on the specified name.","Sets the window based on the specified regex.","Waits for the specified duration in milliseconds.","","","","","","","","","","","","","","","","","","Width of the rectangle.","The <code>Window</code> that the <code>Bot</code> interacts with.","Types a string (alias to <code>key_sequence</code>).","Types a string followed by return.","Left coordinate of the rectangle, relative to x-axis of …","Top coordinate of the rectangle, relative to y-axis of the …","Occurs when error is raised at CoreFoundation level.","Structure representing an error.","Enumeration of different error kinds.","Occurs when template is not found in the window.","Allows to raise OpenCV errors directly.","","","","","","Formats the error for display.","","Returns the argument unchanged.","Returns the argument unchanged.","Converts an OpenCV error to this error type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A known kind of error.","Details relative to the error.","","","","","","",""],"i":[0,0,0,0,0,1,10,4,8,9,1,10,4,8,9,1,4,1,1,8,9,8,9,0,1,10,4,8,9,1,10,4,8,9,1,4,10,4,8,9,1,1,1,1,1,1,1,10,4,1,10,9,9,1,1,1,1,1,1,1,1,8,9,10,4,8,9,1,10,4,8,9,1,10,4,8,9,1,4,1,1,1,4,4,21,0,0,21,21,21,2,21,2,21,2,2,21,2,2,21,2,2,2,2,21,2,21,2,21,2],"f":[0,0,0,0,0,[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[[1,5,5],[[3,[2]]]],[[1,6,7],[[3,[2]]]],[8,8],[9,9],[[]],[[]],0,[[1,6],[[3,[4,2]]]],[[10,11],12],[[4,11],12],[[8,11],12],[[9,11],12],[[1,11],12],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[1,13],[[3,[2]]]],[[1,13],[[3,[2]]]],[[1,14],[[3,[2]]]],[[1,13],[[3,[2]]]],[[1,5,5],[[3,[2]]]],[[1,5,5],[[3,[2]]]],[[],10],[[5,5,5,5],4],[[],1],[10,15],[[9,6],[[3,[2]]]],[[9,16]],[[1,16]],[[1,17]],[[1,5]],[[1,18]],[[1,19]],[[1,14]],[[1,14]],[[1,7]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,[[1,14],[[3,[2]]]],[[1,14],[[3,[2]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[21,11],12],[[2,11],12],[[2,11],12],[[]],[[]],[22,2],[[]],[[]],0,0,[[],15],[[],3],[[],3],[[],3],[[],3],[[],20],[[],20]],"c":[],"p":[[3,"Bot"],[3,"Error"],[4,"Result"],[3,"Rect"],[15,"u32"],[3,"Path"],[15,"u64"],[3,"Bounds"],[3,"Window"],[3,"WindowList"],[3,"Formatter"],[6,"Result"],[4,"Key"],[15,"str"],[3,"String"],[15,"f32"],[3,"Enigo"],[3,"Duration"],[15,"i64"],[3,"TypeId"],[4,"ErrorKind"],[3,"Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
